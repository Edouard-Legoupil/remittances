// Generated by CoffeeScript 1.3.0
(function() {
  var countryCentroidsByCode, height, i, landColor, migrationYears, path, projection, remittanceYears, selectedYear, svg, width;

  landColor = d3.rgb("#1e2b32").brighter(2);

  width = 960;

  height = 600;

  svg = d3.select("body").append("svg").attr("width", width).attr("height", height);

  projection = d3.geo.projection(d3.geo.hammer.raw(1.75, 2)).rotate([-10, -45]).translate([width / 2.3, height / 2]).scale(180);

  path = d3.geo.path().projection(projection);

  migrationYears = ["1970", "1980", "1990", "2000"];

  remittanceYears = ((function() {
    var _i, _results;
    _results = [];
    for (i = _i = 1970; _i <= 2012; i = ++_i) {
      _results.push(i.toString());
    }
    return _results;
  })()).concat("2012e");

  selectedYear = "2000";

  countryCentroidsByCode = {};

  queue().defer(d3.csv, "data/country-centroids.csv").defer(d3.json, "data/world-countries.json").defer(d3.csv, "data/migration-1K-plus.csv").defer(d3.csv, "data/countries-iso2to3.csv").defer(d3.csv, "data/RemittancesData_Inflows_Nov12.csv").await(function(err, countryCentroids, world, migrations, isocodes, remittances) {
    var arcs, circles, countryNameToIso3, d, f, featuresByCode, featuresByName, flows, gcountries, getIso3, iso2To3, magnitudeFormat, max, maxMagnitude, migrationsByOriginCode, migrationsColor, name, r, remittancesMagnitudeFormat, rscale, update, yearLen, yearsg;
    getIso3 = function(remittance) {
      var iso3;
      iso3 = iso2To3[remittance.iso2];
      if (iso3 === undefined) {
        iso3 = countryNameToIso3[remittance.Name];
        if (iso3 === undefined) {
          console.log("Could not find flows for code: " + d.iso2 + ", name: " + d.Name);
        }
      }
      return iso3;
    };
    update = function(start) {
      var c;
      c = gcountries.selectAll("circle");
      if (!start) {
        c = c.transition().duration((start ? 0 : 100));
      }
      return c.attr("r", function(d) {
        var r;
        r = rscale(d[selectedYear]);
        if (isNaN(r)) {
          return 0;
        } else {
          return r;
        }
      });
    };
    countryCentroids.forEach(function(d) {
      return countryCentroidsByCode[d.Code] = [+d.lon, +d.lat];
    });
    featuresByName = {};
    featuresByCode = {};
    f = void 0;
    for (d in world.features) {
      f = world.features[d];
      f.centroid = countryCentroidsByCode[f.id];
      if (f.centroid !== undefined) {
        f.centroidp = projection(f.centroid);
      }
      featuresByName[f.properties.name] = f;
      featuresByCode[f.id] = f;
    }
    svg.append("g").attr("class", "map").selectAll("path").data(world.features).enter().append("path").attr("class", "land").attr("fill", landColor).attr("data-code", function(d) {
      return d.id;
    }).attr("d", path);
    migrationsColor = d3.scale.log().range(["#221C03", "#E9D35A"]).interpolate(d3.interpolateHcl);
    arcs = svg.append("g").attr("class", "arcs");
    migrationsByOriginCode = {};
    magnitudeFormat = d3.format(",.0f");
    migrations.forEach(function(d) {
      return d.max = d3.max(migrationYears.map(function(y) {
        return +d[y];
      }));
    });
    maxMagnitude = d3.max(migrations, function(d) {
      return d.max;
    });
    migrationsColor.domain([1, maxMagnitude]);
    flows = migrations.forEach(function(flow) {
      d = featuresByCode[flow.Dest];
      if (migrationsByOriginCode[flow.Origin] === undefined) {
        migrationsByOriginCode[flow.Origin] = [];
      }
      return migrationsByOriginCode[flow.Origin].push(flow);
    });
    gcountries = svg.append("g").attr("class", "countries");
    iso2To3 = {};
    countryNameToIso3 = {};
    isocodes.forEach(function(d) {
      iso2To3[d.iso2] = d.iso3;
      return countryNameToIso3[d.name] = d.iso3;
    });
    name = void 0;
    r = void 0;
    remittances.forEach(function(r) {
      var i, y, _results;
      f = featuresByName[r.Name];
      if (f) {
        r.centroid = f.centroidp;
      }
      _results = [];
      for (i in remittanceYears) {
        y = remittanceYears[i];
        if (r[y] !== undefined) {
          _results.push(r[y] = +r[y].replace(",", ""));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
    max = d3.max(remittances, function(d) {
      return d3.max(remittanceYears.map(function(y) {
        return +d[y];
      }));
    });
    rscale = d3.scale.sqrt().range([0, 25]).domain([0, max]);
    remittancesMagnitudeFormat = d3.format(",.0f");
    circles = gcountries.selectAll("circle").data(remittances.filter(function(d) {
      return d.centroid !== undefined && d.centroid[0] !== undefined;
    })).enter().append("svg:circle").attr("class", "country").attr("cx", function(d) {
      if (d.centroid) {
        return d.centroid[0];
      }
    }).attr("cy", function(d) {
      if (d.centroid) {
        return d.centroid[1];
      }
    }).attr("opacity", 0).on("mouseover", function(d) {
      var migs, selectedIso3;
      selectedIso3 = getIso3(d);
      if (selectedIso3 !== undefined) {
        migs = migrationsByOriginCode[selectedIso3];
        if (migs === undefined) {
          return console.log("No migrations for " + selectedIso3);
        } else {
          d3.select("#details").html("Migrants from <b>" + d.Name + "</b><br>" + "sent home US$" + remittancesMagnitudeFormat(d[selectedYear]) + "M" + "<br> in " + selectedYear);
          migrationsByOriginCode[selectedIso3].forEach(function(m) {
            var land;
            land = svg.selectAll("path.land").filter(function(l) {
              return l.id === m.Dest;
            });
            return land.transition().duration(200).attr("fill", function(d) {
              var val;
              val = +m[selectedYear];
              if (!isNaN(val)) {
                return migrationsColor(val);
              } else {
                return landColor.darker(0.5);
              }
            });
          });
          svg.selectAll("path.land").filter(function(l) {
            return l.id === selectedIso3;
          }).transition().duration(200).attr("stroke", "red");
          return gcountries.selectAll("circle.country").transition().duration(200).attr("opacity", 0);
        }
      }
    }).on("mouseout", function(d) {
      d3.select("#details").text("");
      svg.selectAll("path.land").transition().duration(300).attr("fill", landColor).attr("stroke", "none");
      return gcountries.selectAll("circle.country").transition().duration(300).attr("opacity", 1);
    }).append("svg:title").text(function(d) {
      return d.Name + ": " + remittancesMagnitudeFormat(d[selectedYear]) + "M current US$";
    });
    update(true);
    gcountries.selectAll("circle").transition().duration(300).attr("opacity", 1);
    yearLen = 12;
    yearsg = svg.append("g").attr("class", "years").attr("transform", "translate(" + ((width - remittanceYears.length * yearLen) / 2) + "," + height + ")");
    yearsg.selectAll("text.remy").data(remittanceYears).enter().append("svg:text").attr("class", "remy").classed("migrations", function(d) {
      return migrationYears.indexOf(d) > 0;
    }).attr("visibility", function(d, i) {
      if ((+d % 5) === 0) {
        return "visible";
      } else {
        return "hidden";
      }
    }).attr("y", -5).attr("x", function(d, i) {
      return i * yearLen;
    }).attr("text-anchor", "middle").text(function(d) {
      return d;
    }).on("mouseover", function(d) {
      selectedYear = d;
      yearsg.selectAll("text.remy").classed("sel", false);
      d3.select(this).classed("sel", true);
      return update();
    });
    return d3.selectAll("text.remy").filter(function(d) {
      return d === selectedYear;
    }).classed("sel", true);
  });

}).call(this);
